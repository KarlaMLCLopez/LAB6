/*
 * File:   main.c
 * Author: karla
 *
 * Created on 23 de marzo de 2023, 05:50 PM
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#define _tmr0_value 200
#define _XTAL_FREQ 8000000 //Lo utiliza internamente para calcular como sacar el delay
int VALOR;

void __interrupt() isr(void){
    if (T0IF){
        TMR0 = _tmr0_value;
        T0IF = 0;
        
    }
}
void setup(void);

void main(void) {

    setup();
    while(1){
        ADCON0bits.CHS = 0b0000;
        ADCON0bits.GO_DONE = 1;
        while (ADCON0bits.GO_DONE);
        int adc1 = ((ADRESH<<8) | ADRESL);
        PORTC = (char)(adc1>>2);
        __delay_ms(10);
        
        ADCON0bits.CHS = 0b0001; // Seleccionar el canal AN1 para la conversión ADC
        ADCON0bits.GO_DONE = 1; // Iniciar la conversión ADC
        while (ADCON0bits.GO_DONE); // Esperar hasta que la conversión ADC termine

        int adc0 = ((ADRESH<<8) | ADRESL); // Leer el resultado de la conversión ADC de los registros ADRESH y ADRESL
        int voltage = adc0/2; // Convertir el resultado de la conversión ADC en voltaje

        
        int digit1 = voltage / 100;
        int digit2 = (voltage % 100) / 10;
        int digit3 = voltage % 10;
        int VALOR;
        
         //Tabla Primer display
        switch (digit1) {
            case 0:
                VALOR = 0b00111111;
                break;
            case 1:
                VALOR = 0b10000110;
                break;
            case 2:
                VALOR = 0b11011011;
                break;
            case 3:
                VALOR = 0b11001111;
                break;
            case 4:
                VALOR = 0b11100110;
                break;
            case 5:
                VALOR = 0b11101101;
                break;
            case 6:
                VALOR = 0b11111101;
                break;
            case 7:
                VALOR = 0b10000111;
                break;
            case 8:
                VALOR = 0b11111111;
                break;
            case 9:
                VALOR = 0b11100111;
                break;
            default:
                break;
        }
        
        //Mostrar valor en display
        PORTEbits.RE0 = 1; // Encender primer ánodo común
        PORTD=VALOR;
        __delay_ms(5); // Esperar un tiempo suficiente para que el segmento se encienda
        PORTEbits.RE0 = 0; // Apagar primer ánodo común
        
        //Tabla Segundo display
        switch (digit2) {
            case 0:
                VALOR = 0b00111111;
                break;
            case 1:
                VALOR = 0b00000110;
                break;
            case 2:
                VALOR = 0b01011011;
                break;
            case 3:
                VALOR = 0b01001111;
                break;
            case 4:
                VALOR = 0b01100110;
                break;
            case 5:
                VALOR = 0b01101101;
                break;
            case 6:
                VALOR = 0b01111101;
                break;
            case 7:
                VALOR = 0b00000111;
                break;
            case 8:
                VALOR = 0b01111111;
                break;
            case 9:
                VALOR = 0b01100111;
                break;
            default:
                break;
        }
        //Mostrar valor en display
        PORTEbits.RE1 = 1; // Encender primer ánodo común
        PORTD=VALOR;
        __delay_ms(5); // Esperar un tiempo suficiente para que el segmento se encienda
        PORTEbits.RE1 = 0; // Apagar primer ánodo común
        
        //tabla tercer display
        switch (digit3) {
            case 0:
                VALOR = 0b00111111;
                break;
            case 1:
                VALOR = 0b00000110;
                break;
            case 2:
                VALOR = 0b01011011;
                break;
            case 3:
                VALOR = 0b01001111;
                break;
            case 4:
                VALOR = 0b01100110;
                break;
            case 5:
                VALOR = 0b01101101;
                break;
            case 6:
                VALOR = 0b01111101;
                break;
            case 7:
                VALOR = 0b00000111;
                break;
            case 8:
                VALOR = 0b01111111;
                break;
            case 9:
                VALOR = 0b01100111;
                break;
            default:
                break;
        }
        //Mostrar valor en display
        PORTEbits.RE2 = 1; // Encender primer ánodo común
        PORTD=VALOR;
        __delay_ms(5); // Esperar un tiempo suficiente para que el segmento se encienda
        PORTEbits.RE2 = 0; // Apagar primer ánodo común
    }
    return;
}

void setup(void){
    ANSEL = 0;
    ANSELH = 0;
    TRISC = 0;
    TRISD = 0;
    TRISB = 0;
    TRISE = 0x00; 
    
    OSCCONbits.IRCF = 0b111; //8Mhz
    OSCCONbits.SCS = 1;
    //config tmr0
    OPTION_REGbits.T0CS = 0;
    OPTION_REGbits.PSA = 0;
    OPTION_REGbits.PS = 0b111;
    TMR0 = _tmr0_value;
    
    //configuración de la interrupcion del TMR0
    INTCONbits.T0IF = 0;
    INTCONbits.T0IE = 1;
    INTCONbits.GIE = 1;
    
    //Configuración del ADC
    ANSEL = 0b11; // Configurar AN0 y AN1 como entradas analógicas
    TRISA = 0b11; // Configurar RA0 y RA1 como entradas
    
    ADCON0bits.ADCS = 0b10;
    //ADCON0bits.CHS = 0;
    __delay_ms(1);
    ADCON1bits.ADFM = 1;
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    ADCON0bits.ADON = 1;
    ADIF = 0;
          
}
